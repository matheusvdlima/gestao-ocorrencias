version: '3.9'

networks:
  incidents_net:

volumes:
  db_data:

services:
  db:
    image: postgres:16
    container_name: incidents_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-incidents_db}
      POSTGRES_USER: ${POSTGRES_USER:-incidents_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-incidents_pass}
    ports:
      - "5434:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 20
      start_period: 10s
    networks:
      - incidents_net

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: incidents_api
    restart: unless-stopped
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/${POSTGRES_DB:-incidents_db}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER:-incidents_user}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD:-incidents_pass}
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: org.hibernate.dialect.PostgreSQLDialect
      # opcional:
      SERVER_PORT: 8080
      SPRING_PROFILES_ACTIVE: docker
      # para CORS se precisar liberar o front (ajuste conforme seu host):
      # CORS_ALLOWED_ORIGINS: http://localhost:4200
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:8080/actuator/health | grep -q '\"status\":\"UP\"'"]
      interval: 10s
      timeout: 5s
      retries: 12
      start_period: 20s
    networks:
      - incidents_net

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: incidents_web
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    ports:
      - "4200:80"
    networks:
      - incidents_net
